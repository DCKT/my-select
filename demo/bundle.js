(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var Select = require('../lib/select');

document.addEventListener('DOMContentLoaded', function () {
  var select = new Select({
    select: '.test',
    container: '#bloc' });

  select.on('change', function (value) {
    console.log(value);
  });
}, false);

},{"../lib/select":5}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _CLASSNAME = require('./constants.js');

exports['default'] = function (option, select, _this) {
  option.addEventListener('click', function () {
    var id = this.getAttribute('data-select-id');
    select.value = this.getAttribute('data-value');
    _this.selectedValue = this.getAttribute('data-value');
    document.querySelector('.' + _CLASSNAME.CLASSNAME.LABEL + '-' + id).innerHTML = this.innerHTML;
    _this.hideLists();
    _this.events.change ? _this.events.change(_this.selectedValue) : null;
  }, false);
};

module.exports = exports['default'];

},{"./constants.js":3}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = {
  CLASSNAME: {
    LABEL: 'js-myselect-label',
    LABEL_FOCUS: 'js-myselect-label--focus',
    LIST_VALUES: 'js-myselect-list-values',
    LIST_VALUES_VISIBLE: 'js-myselect-list-values--visible',
    ITEM: 'js-myselect-item' } };
module.exports = exports['default'];

},{}],4:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function (obj) { return obj && obj.__esModule ? obj : { 'default': obj }; };

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _CLASSNAME = require('./constants.js');

var _showDropdown = require('./showDropDown.js');

var _showDropdown2 = _interopRequireWildcard(_showDropdown);

var _bindClickOptions = require('./bindClickOptions.js');

var _bindClickOptions2 = _interopRequireWildcard(_bindClickOptions);

exports['default'] = function (select, container, id) {
  var _this2 = this;

  var label = document.createElement('div');
  var valuesList = document.createElement('div');
  var _this = this;

  label.className = '' + _CLASSNAME.CLASSNAME.LABEL + ' ' + _CLASSNAME.CLASSNAME.LABEL + '-' + id;
  valuesList.className = _CLASSNAME.CLASSNAME.LIST_VALUES;

  label.innerHTML = select.selectedOptions[0].innerHTML;

  label.addEventListener('click', function (e) {
    if (_this.isDevice && _this.nativeOnDevice) {
      _this.showDropdown(select);
    } else {
      this.classList.add(_CLASSNAME.CLASSNAME.LABEL_FOCUS);
      this.nextSibling.classList.add(_CLASSNAME.CLASSNAME.LIST_VALUES_VISIBLE);
    }
  });

  this.fakeSelect = label;

  [].forEach.call(select.children, function (option, index) {
    var divOption = document.createElement('div');

    divOption.className = _CLASSNAME.CLASSNAME.ITEM;
    divOption.innerHTML = option.innerHTML;
    divOption.setAttribute('data-value', option.getAttribute('value'));
    divOption.setAttribute('data-select-id', id);
    valuesList.appendChild(divOption);

    _bindClickOptions2['default'](divOption, select, _this2);
  });

  container.appendChild(label);
  container.appendChild(valuesList);
};

module.exports = exports['default'];

},{"./bindClickOptions.js":2,"./constants.js":3,"./showDropDown.js":6}],5:[function(require,module,exports){
'use strict';

var _interopRequireWildcard = function _interopRequireWildcard(obj) {
  return obj && obj.__esModule ? obj : { 'default': obj };
};

var _classCallCheck = function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
};

var _createClass = (function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
})();

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _CLASSNAME = require('./constants.js');

var _createDOMElements = require('./createDOMElements.js');

var _createDOMElements2 = _interopRequireWildcard(_createDOMElements);

var i = 0;

var Select = (function () {
  function Select(params) {
    _classCallCheck(this, Select);

    if (!params || !params.select || !params.container) {
      console.error('my-select error : Missing options');
      return;
    }

    var select = params.select;
    var container = params.container;

    this.select = document.querySelector(select);
    this.container = document.querySelector(container);
    this.selectedValue = null;
    this.fakeSelect = null;
    this.events = {};
    this.id = i;
    this.nativeOnDevice = !!params.nativeOnDevice;
    this.isDevice = 'ontouchstart' in document.documentElement;

    if (!this.select) {
      console.error('my-select error : select Node not found');
      return;
    };

    if (!this.container) {
      console.error('my-select error : container Node not found');
      return;
    };

    _createDOMElements2['default'].call(this, this.select, this.container, this.id);
    bindClickOut.call(this);
  }

  _createClass(Select, [{
    key: 'hideLists',
    value: function hideLists() {
      this.fakeSelect.classList.remove(_CLASSNAME.CLASSNAME.LABEL_FOCUS);
      this.fakeSelect.nextSibling.classList.remove(_CLASSNAME.CLASSNAME.LIST_VALUES_VISIBLE);
    }
  }, {
    key: 'on',
    value: function on(event, callback) {
      this.events[event] = callback.bind(this);
    }
  }]);

  return Select;
})();

exports['default'] = Select;
;

function bindClickOut() {
  var _this = this;

  document.addEventListener('click', function (e) {
    var targetClass = e.target.classList;

    if (!targetClass.contains(_CLASSNAME.CLASSNAME.LABEL) && !targetClass.contains(_CLASSNAME.CLASSNAME.ITEM)) {
      _this.hideLists();
    };
  }, false);
};
module.exports = exports['default'];

},{"./constants.js":3,"./createDOMElements.js":4}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

exports['default'] = function (element) {
  var event;
  event = document.createEvent('MouseEvents');
  event.initMouseEvent('mousedown', true, true, window);
  element.dispatchEvent(event);
};

module.exports = exports['default'];

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
